plugins {
	id 'java'
	id 'jacoco'
	alias(libs.plugins.spotless)
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.boot.aot)
	//
	alias(libs.plugins.web3j)
	alias(libs.plugins.node)
}

group = 'com.example.web3'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation(platform(libs.spring.boot.dependencies))
	implementation libs.spring.boot.starter.actuator
	implementation libs.spring.boot.starter.data.jpa
	implementation libs.spring.boot.starter.validation
	implementation libs.spring.boot.starter.web
	//
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation libs.guava
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation libs.common.lang3
	implementation libs.web3j
	//
	compileOnly libs.lombok
	runtimeOnly libs.h2
	//
	annotationProcessor libs.bundles.annotation.processor
	//
	testImplementation libs.bundles.testing
}

sourceSets {
	main {
		solidity {
			setOptimize(true)
			setOptimizeRuns(200)
			setVersion('0.8.26')
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

web3j {
	generatedPackageName = 'com.example.demo.contracts.{0}'
}

node {
	nodeProjectDir = file("../solidity-sample001/")
}

tasks.named('processResources') {
	dependsOn 'generateContractWrappers'
}

apply from: 'jacoco-build.gradle'

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '.gitattributes', '.gitignore'
		targetExclude('**/build/**')

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		targetExclude('**/build/**')
		// Use the default importOrder configuration
		importOrderFile('spotless.importorder')
		removeUnusedImports()
		cleanthat()
		palantirJavaFormat()
		formatAnnotations()  // fixes formatting of type annotations, see below
		licenseHeader '/* (C) $YEAR */ \n\n' // or licenseHeaderFile
	}
}

springBoot {
	buildInfo()
}

tasks.named("bootBuildImage") {
	environment["BPE_DELIM_JAVA_TOOL_OPTIONS"] = " "
	environment["BPE_APPEND_JAVA_TOOL_OPTIONS"] = "-Dspring.aot.enabled=true"
}

//tasks.named("build") {
//	dependsOn 'spotlessApply'
//}